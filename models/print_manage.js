// Generated by CoffeeScript 1.7.1
(function() {
  var Pos, nconf, orm;

  Pos = require('../lib/pos');

  nconf = require('../lib/nconf');

  orm = require('orm');

  module.exports = function(db) {
    var print_manage;
    print_manage = db.define('print_manage', {
      print_manage_id: {
        type: 'serial'
      },
      last_checked_date: {
        type: 'integer'
      },
      printIP: {
        type: 'text'
      },
      print_status: {
        type: 'integer'
      }
    }, {
      id: 'print_manage_id',
      methods: {
        queryStatus: function(callback) {
          var self;
          self = this;
          this.last_checked_date = new Date().getTime() / 1000;
          if (!this.printIP) {
            this.print_status = 0;
          }
          return this.save((function(_this) {
            return function(err) {
              var arrStatus;
              if (err || !_this.printIP) {
                return callback(err, _this);
              }
              arrStatus = Pos.query(_this.printIP);
              _this.print_status = !arrStatus || arrStatus.length > 0 ? 0 : 1;
              return _this.save(function(err) {
                return callback(err, _this);
              });
            };
          })(this));
        }
      }
    });
    return print_manage.getOneEarlyChecked = function(callback) {
      var lastTime;
      lastTime = parseInt((new Date().getTime() - nconf.get('print:checkTimes')) / 1000);
      return this.find({
        'or': [
          {
            last_checked_date: null
          }, {
            last_checked_date: orm.lt(lastTime)
          }, {
            last_checked_date: ''
          }
        ]
      }).limit(1).order('last_checked_date').run(function(err, list) {
        if (!list || list.length === 0) {
          return callback(err, null);
        }
        return callback(err, list[0]);
      });
    };
  };

}).call(this);
