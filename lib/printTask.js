// Generated by CoffeeScript 1.7.1
(function() {
  var OnlyOneTask, cluster, moment, nconf;

  OnlyOneTask = require('./OnlyOneTask');

  cluster = require('cluster');

  moment = require('moment');

  nconf = require('./nconf');

  module.exports = function(db) {
    var checkPrintTask, checkTimeoutLogsTask, clearOldTask, loopPrintTask;
    if (cluster.isMaster) {
      if (nconf.get('print:autoCheckPrint')) {
        checkPrintTask = OnlyOneTask.define('checkPrintTask', function(print) {
          if (print) {
            return checkPrintTask.exec();
          }
        });
        checkPrintTask.crashTime = nconf.get('print:checkCrashTime') || 10000;
        clearOldTask = OnlyOneTask.define('clearOldTask');
        checkTimeoutLogsTask = OnlyOneTask.define('checkTimeoutLogs');
        loopPrintTask = OnlyOneTask.define('loopPrintTask', function(print) {
          if (print) {
            return loopPrintTask.exec();
          } else {

          }
        });
        loopPrintTask.crashTime = 5000;
        return setInterval(function() {
          checkPrintTask.exec();
          clearOldTask.exec();
          checkTimeoutLogsTask.exec();
          return loopPrintTask.exec();
        }, 2000);
      }
    } else {
      OnlyOneTask.define('checkPrintTask', function(callback) {
        return db.models.print_manage.getOneEarlyChecked(function(err, print) {
          if (!print) {
            return callback();
          }
          console.log('检测打印机', cluster.worker.id, print.printIP, print.print_manage_id);
          return print.queryStatus(function(err, print) {
            if (print.print_status === 0) {
              return callback(print);
            }
            return db.models.print_log.loopFill(print.print_manage_id, function() {
              return callback(print);
            });
          });
        });
      });
      OnlyOneTask.define('clearOldTask', function(callback) {
        return db.models.print_log.clearOld(callback);
      });
      OnlyOneTask.define('checkTimeoutLogsTask', function(callback) {
        return db.models.print_log.checkTimeoutLogs(callback);
      });
      return OnlyOneTask.define('loopPrintTask', function(callback) {
        return db.models.print_log.loopPrint(callback);
      });
    }
  };

}).call(this);
