// Generated by CoffeeScript 1.7.1
(function() {
  var Pos, PrintTask, async, log, nconf, orm, restify;

  restify = require('restify');

  async = require('async');

  log = require('../lib/log');

  Pos = require('../lib/pos');

  nconf = require('../lib/nconf');

  orm = require('orm');

  PrintTask = {
    checkPrintTask: function(models) {
      this.models = models;
      return this.loopPrint(CONST_STATUS.waiting);
    },
    checkOnePrint: function(models, callback) {
      var lastTime, self;
      if (callback == null) {
        callback = function() {};
      }
      self = this;
      lastTime = parseInt((new Date().getTime() - nconf.get('print:checkTimes')) / 1000);
      return models.print_manage.find({
        'or': [
          {
            check_date: null
          }, {
            check_date: orm.lt(lastTime)
          }, {
            check_date: ''
          }
        ]
      }).limit(1).order('check_date').run(function(err, prints) {
        if (!prints || prints.length === 0) {
          return callback();
        }
        return self.checkPrint(models, prints[0].print_manage_id, function(print) {
          if (print.print_status === 1 && nconf.get('print:autoPrintErrorLogs') === true) {

          } else {
            return callback();
          }
        });
      });
    },
    checkPrint: function(models, print_manage_id, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return models.print_manage.get(print_manage_id, function(err, print) {
        if (err || !print) {
          return callback(print);
        }
        print.check_date = new Date().getTime() / 1000;
        return print.save(function(err) {
          var arrStatus;
          if (!print.printIP) {
            arrStatus = Pos.quert(print.printIP);
            print.print_status = arrStatus.length > 0 || !arrStatus ? 0 : 1;
          } else {
            print.print_status = 0;
          }
          return print.save(function(err) {
            return callback(print);
          });
        });
      });
    },
    print: function(models, print_log_id, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return models.print_log.get(print_log_id, function(err, print) {
        if (!print || err) {
          return callback();
        }
        print.is_ok = print.printIP ? CONST_STATUS.printing : CONST_STATUS.other;
        return print.save(function(err) {
          var result;
          if (err || !print.printIP) {
            return callback();
          }
          result = Pos.print(print.printIP, print.print_message);
          print.is_ok = result === 0 ? CONST_STATUS.success : CONST_STATUS.fail;
          if (result === 'OpenError') {
            print.is_ok = CONST_STATUS.error;
          }
          return print.save(function(err) {
            if (err) {
              return callback();
            }
            return callback(print);
          });
        });
      });
    },
    loopPrint: function(status, ip, callback) {
      var query, self;
      if (callback == null) {
        callback = function() {};
      }
      self = this;
      query = {
        is_ok: status
      };
      if (ip) {
        query.printIP = ip;
      }
      return this.models.print_log.one(query, function(err, print) {
        if (!print) {
          return callback();
        }
        if (!print.printIP) {
          print.is_ok = CONST_STATUS.other;
          return print.save(function(err) {
            return self.loopPrint(status, ip, callback);
          });
        }
        print.is_ok = CONST_STATUS.printing;
        return print.save(function(err) {
          var result;
          result = Pos.print(print.printIP, print.print_message);
          print.is_ok = result === 0 ? CONST_STATUS.success : CONST_STATUS.fail;
          if (result === 'OpenError') {
            print.is_ok = CONST_STATUS.error;
          }
          return print.save(function(err) {
            return self.loopPrint(status, ip, callback);
          });
        });
      });
    }
  };

  module.exports = PrintTask;

}).call(this);
