// Generated by CoffeeScript 1.7.1
(function() {
  var OnlyOneTask, Task, cluster, getOneRandomWorker, taskList;

  cluster = require('cluster');

  taskList = {};

  getOneRandomWorker = function() {
    var id, list, worker;
    list = (function() {
      var _ref, _results;
      _ref = cluster.workers;
      _results = [];
      for (id in _ref) {
        worker = _ref[id];
        _results.push(worker);
      }
      return _results;
    })();
    return (list.sort(function() {
      return Math.random() < 0.5;
    }))[0];
  };

  if (cluster.isMaster) {
    cluster.on('listening', function(worker, address) {
      return worker.on('message', function(msg) {
        if (typeof msg === 'object' && OnlyOneTask[msg.taskName]) {
          OnlyOneTask[msg.taskName].status = false;
          return OnlyOneTask[msg.taskName].callback(msg.result);
        }
      });
    });
  } else {
    process.on('message', function(msg) {
      if (typeof msg === 'object' && OnlyOneTask[msg.taskName]) {
        return OnlyOneTask[msg.taskName].run();
      }
    });
  }

  Task = function(name) {
    this.name = name;
  };

  Task.prototype = {
    name: '',
    task: function() {
      return process.send(this.name);
    },
    callback: function() {},
    lastExecTime: new Date(),
    status: false,
    crashTime: 10000,
    exec: function() {
      if (this.status && (new Date() - this.lastExecTime < this.crashTime)) {
        return;
      }
      this.status = true;
      this.lastExecTime = new Date();
      return getOneRandomWorker().send({
        taskName: this.name,
        type: 'run'
      });
    },
    run: function() {
      return this.task((function(_this) {
        return function(result) {
          return process.send({
            taskName: _this.name,
            type: 'complete',
            result: result
          });
        };
      })(this));
    },
    setTask: function(task) {
      if (task) {
        return this.task = task;
      }
    },
    setComplete: function(task) {
      if (task) {
        return this.callback = task;
      }
    }
  };

  OnlyOneTask = {
    define: function(name, task) {
      if (cluster.isMaster) {
        this[name] = new Task(name);
        this[name].setComplete(task);
      } else {
        this[name] = new Task(name);
        this[name].setTask(task);
      }
      return this[name];
    }
  };

  module.exports = OnlyOneTask;

}).call(this);
